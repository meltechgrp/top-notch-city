mutation createOtp(
  $phoneNumber: String!
  $countryCode: String!
  $isLogin: Boolean
) {
  createOtp(
    phoneNumber: $phoneNumber
    countryCode: $countryCode
    isLogin: $isLogin
  ) {
    ok
    timeLeftInSecs
  }
}

mutation updateLiveLocation(
  $userId: ID!
  $latitude: Float!
  $longitude: Float!
  $postId: ID!
) {
  updateLiveLocation(
    userId: $userId
    latitude: $latitude
    longitude: $longitude
    postId: $postId
  ) {
    userId
    latitude
    longitude
    postId
    isLive
  }
}

mutation endLiveLocation(
  $userId: ID!
  $latitude: Float!
  $longitude: Float!
  $postId: ID!
) {
  endLiveLocation(
    userId: $userId
    latitude: $latitude
    longitude: $longitude
    postId: $postId
  )
}

mutation createCommunityPayment(
  $groupId: ID!
  $amount: Float
  $currency: Currency!
  $title: String!
  $description: String
) {
  createCommunityPayment(
    groupId: $groupId
    amount: $amount
    currency: $currency
    title: $title
    description: $description
  ) {
    groupId
    paymentId
  }
}
mutation editCommunityPayment(
  $amount: Float
  $title: String!
  $description: String
  $paymentId: ID!
) {
  editCommunityPayment(
    amount: $amount
    title: $title
    description: $description
    paymentId: $paymentId
  )
}
mutation closeCommunityPayment($paymentId: ID!) {
  closeCommunityPayment(paymentId: $paymentId)
}

mutation createExternalCommunityPaymentLink(
  $currency: Currency!
  $groupId: ID!
  $paymentId: ID!
  $amount: Float!
  $paymentType: PaymentType!
  $platform: AppPlatform!
) {
  createExternalCommunityPaymentLink(
    currency: $currency
    groupId: $groupId
    paymentId: $paymentId
    amount: $amount
    paymentType: $paymentType
    platform: $platform
  ) {
    paymentLink
  }
}

mutation verifyOtp(
  $phoneNumber: String!
  $countryCode: String!
  $otp: String!
  $did: String!
  $isLogin: Boolean
) {
  verifyOtp(
    phoneNumber: $phoneNumber
    countryCode: $countryCode
    otp: $otp
    did: $did
    isLogin: $isLogin
  ) {
    token
    kycStage
  }
}

mutation createUserKYC0(
  $firstName: String!
  $lastName: String!
  $username: String!
  $email: String!
  $dob: DateTime!
  $placeId: String!
  $gender: String!
  $photoId: String
) {
  createUserKYC0(
    firstName: $firstName
    lastName: $lastName
    username: $username
    email: $email
    dob: $dob
    placeId: $placeId
    gender: $gender
    photoId: $photoId
  )
}

mutation createSplitShare($arg: CreateSplitShareInput!) {
  createSplitShare(arg: $arg)
}

mutation createSplitBuy($arg: CreateSplitBuyInput!) {
  createSplitBuy(arg: $arg)
}

mutation joinSplitBuy(
  $groupId: ID!
  $slots: Int!
  $pickupAddress: String
  $deliveryZoneId: ID
) {
  joinSplitBuy(
    groupId: $groupId
    slots: $slots
    pickupAddress: $pickupAddress
    deliveryZoneId: $deliveryZoneId
  )
}

mutation joinSplitShare($groupId: ID!, $slots: Int!) {
  joinSplitShare(groupId: $groupId, slots: $slots)
}

mutation createOrUpdateSplitCredential(
  $splitId: ID!
  $password: String!
  $username: String!
) {
  createOrUpdateSplitCredential(
    splitId: $splitId
    password: $password
    username: $username
  )
}

mutation createSplitPlatformSuggestion(
  $name: String!
  $website: String!
  $subscriptionPageLink: String
) {
  createSplitPlatformSuggestion(
    name: $name
    website: $website
    subscriptionPageLink: $subscriptionPageLink
  )
}

mutation CreateSplitJoinRequest(
  $groupId: ID!
  $groupType: GroupType!
  $slots: Int!
  $deliveryZoneId: String
  $pickupAddress: String
) {
  createSplitJoinRequest(
    groupId: $groupId
    groupType: $groupType
    slots: $slots
    deliveryZoneId: $deliveryZoneId
    pickupAddress: $pickupAddress
  )
}

mutation createReport(
  $reason: String!
  $meta: String!
  $referenceType: ReportReferenceType!
  $referenceId: String!
  $type: ReportType
  $files: [String!]
) {
  createReport(
    reason: $reason
    meta: $meta
    referenceType: $referenceType
    referenceId: $referenceId
    type: $type
    files: $files
  )
}

mutation releaseSplitFund($groupId: ID!) {
  releaseSplitFund(groupId: $groupId)
}

mutation enableGroupChat($groupId: ID!) {
  enableGroupChat(groupId: $groupId)
}

mutation createSplitJoinRequestUpdate($id: ID!, $status: RequestStatus!) {
  createSplitJoinRequestUpdate(id: $id, status: $status)
}

mutation reactTo($itemId: ID!, $reactionTo: ReactionTo!) {
  reactTo(itemId: $itemId, reaction: LOVE, reactionTo: $reactionTo)
}

mutation createPaymentLink(
  $amount: Float!
  $currency: Currency!
  $platform: AppPlatform!
  $paymentType: PaymentType!
) {
  createPaymentLink(
    amount: $amount
    currency: $currency
    platform: $platform
    paymentType: $paymentType
  )
}
# Group
mutation createGroup($arg: CreateGroupInput!) {
  createGroup(arg: $arg)
}
mutation editGroup($arg: EditGroupInput!) {
  editGroup(arg: $arg)
}

mutation joinGroupRequest($groupId: ID!) {
  joinGroupRequest(groupId: $groupId)
}

mutation joinGroupOnInvite($groupId: ID!) {
  joinGroupOnInvite(groupId: $groupId)
}

mutation respondToGroupJoinRequest(
  $groupId: ID!
  $userId: ID!
  $status: RequestStatus!
) {
  respondToGroupJoinRequest(groupId: $groupId, userId: $userId, status: $status)
}
mutation cancelJoinGroupRequest($groupId: ID!) {
  cancelJoinGroupRequest(groupId: $groupId)
}
mutation blockGroupMember($groupId: ID!, $userId: ID!) {
  blockGroupMember(groupId: $groupId, userId: $userId)
}
mutation unblockGroupMember($groupId: ID!, $userId: ID!) {
  unblockGroupMember(groupId: $groupId, userId: $userId)
}

mutation removeGroupMember($groupId: ID!, $userId: ID!) {
  removeGroupMember(groupId: $groupId, userId: $userId)
}
mutation inviteToGroup($groupId: ID!, $invitees: [ID!]!) {
  inviteToGroup(groupId: $groupId, invitees: $invitees)
}
mutation toggleChatMute($chatId: ID!, $until: DateTime) {
  toggleChatMute(chatId: $chatId, until: $until)
}

mutation deleteSplit($groupId: ID!) {
  deleteSplit(groupId: $groupId)
}

mutation updateUserInfo($photo: String, $username: String) {
  updateUserInfo(photo: $photo, username: $username)
}

mutation connectionRequest($userId: ID!) {
  connectionRequest(userId: $userId)
}

mutation respondToConnectionRequest(
  $requesterId: ID!
  $status: ConnectionStatus!
) {
  respondToConnectionRequest(requesterId: $requesterId, status: $status)
}
mutation cancelConnection($userId: ID!) {
  cancelConnection(userId: $userId)
}

mutation disconnectConnection($userId: ID!) {
  disconnectConnection(userId: $userId)
}

mutation blockUser($userId: ID!) {
  blockUser(userId: $userId)
}

mutation addBankAccount($args: AddBankAccountInput!) {
  addBankAccount(args: $args)
}

mutation cashout($args: CashoutInput!) {
  cashout(args: $args)
}

mutation cancelCashout($args: CancelCashoutInput!) {
  cancelCashout(args: $args)
}

mutation inviteToSplit($groupId: ID!, $invitees: [ID!]!) {
  inviteToSplit(groupId: $groupId, invitees: $invitees)
}

mutation markNotificationsAsSeen($category: NotificationCategory!) {
  markNotificationsAsSeen(category: $category)
}

mutation MarkNotificationAsSeenById($notificationId: ID!) {
  markNotificationAsSeenById(notificationId: $notificationId)
}

mutation makeMessagesRead($chatId: String!) {
  makeMessagesRead(chatId: $chatId)
}

mutation makeMessageDelivered($chatId: String!, $messageId: String!) {
  makeMessageDelivered(chatId: $chatId, messageId: $messageId)
}

mutation createInviteCode(
  $referenceId: ID!
  $referenceType: InviteCodeReferenceType!
  $source: InviteCodeSource!
) {
  createInviteCode(
    referenceId: $referenceId
    referenceType: $referenceType
    source: $source
  )
}

# Community payment

mutation makeCommunityPaymentViaWallet(
  $groupId: ID!
  $amount: Float!
  $currency: Currency!
  $paymentId: ID!
) {
  makeCommunityPaymentViaWallet(
    groupId: $groupId
    amount: $amount
    currency: $currency
    paymentId: $paymentId
  )
}
